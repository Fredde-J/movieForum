[{"D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\index.js":"1","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\App.js":"2","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\reportWebVitals.js":"3","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\Home.js":"4","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\ThreadPage.js":"5","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\PostsPage.js":"6","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\components\\Header.js":"7"},{"size":245,"mtime":1608374179809,"results":"8","hashOfConfig":"9"},{"size":791,"mtime":1609160353721,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1252,"mtime":1608559525376,"results":"12","hashOfConfig":"9"},{"size":3647,"mtime":1609166247019,"results":"13","hashOfConfig":"9"},{"size":1840,"mtime":1609163783258,"results":"14","hashOfConfig":"9"},{"size":897,"mtime":1609749649648,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"crpj8u",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\index.js",[],["35","36"],"D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\App.js",[],"D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\reportWebVitals.js",[],["37","38"],"D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\Home.js",["39"],"import React, {useState,useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\n\r\nconst Home = () => {\r\n    const [categories, setCategories] = useState(null);\r\n    let history = useHistory()\r\n\r\n    const getCategories = async () =>{\r\n            let res = await fetch(`api/v1/categories`);\r\n            console.log(res)\r\n            try {\r\n              res = await res.json();\r\n              setCategories(res);\r\n            } catch(e) {\r\n              console.log(e)\r\n              console.error(\"Faild to fetch categories\");\r\n            }\r\n        }\r\n\r\n        const goToThreads = (category)=>{\r\n          console.log(category.id);\r\n          history.push(\"/threads/\"+category.id)\r\n        }\r\n\r\n        useEffect(() => {\r\n           getCategories()\r\n           console.log(categories)\r\n        }, [])\r\n         \r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          {categories&&\r\n          categories.map((category, i)=> {\r\n            return  <Button  key={i} onClick={()=>{goToThreads(category)}} block size=\"xl\" >{category.name}</Button>\r\n          })}\r\n         \r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Home\r\n","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\ThreadPage.js",["40","41","42"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n} from \"reactstrap\";\r\n\r\nconst ThreadPage = () => {\r\n  const [threads, setThreads] = useState(null);\r\n  const [modal, setModal] = useState(false);\r\n  const [title, setTitle] = useState(null);\r\n  const [message,setMessage] = useState(null)\r\n\r\n  let { id } = useParams();\r\n  let history = useHistory();\r\n\r\n  const getThreads = async () => {\r\n    let res = await fetch(\"/api/v1/threads/getThreadsByCategoryId/\" + id);\r\n    console.log(res);\r\n    try {\r\n      res = await res.json();\r\n      setThreads(res);\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.error(\"Faild to fetch threads\");\r\n    }\r\n  };\r\n\r\n  const goToPosts = (thread) => {\r\n    console.log(thread.id);\r\n    history.push(\"/posts/\" + thread.id);\r\n  };\r\n\r\n  const addThread = async (e) => {\r\n    e.preventDefault();\r\n    console.log(threads[0])\r\n    let thread = {\r\n      title:title,\r\n      timestamp: Date.now(),\r\n      category: threads[0].category\r\n    }\r\n\r\n   \r\n\r\n    let response = await fetch(\"/api/v1/threads\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(thread),\r\n    })\r\n    console.log(response)\r\n    if(response.status==200){\r\n      try{\r\n        thread = await response.json();\r\n      }catch(e){\r\n        console.error(e)\r\n      }\r\n      console.log(\"thread\", thread)\r\n      let postBody = {\r\n        message: message,\r\n        timestamp: Date.now(),\r\n        thread:  thread\r\n      }\r\n      response = await fetch(\"/api/v1/posts\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(postBody),\r\n      })  \r\n      console.log(response)\r\n    }\r\n    \r\n  };\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  useEffect(() => {\r\n    console.log(\"id:\", id);\r\n    getThreads();\r\n    console.log(threads);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <CardBody>\r\n          {threads &&\r\n            threads.map((thread, i) => {\r\n              return (\r\n                <Button\r\n                  onClick={() => {\r\n                    goToPosts(thread);\r\n                  }}\r\n                  key={i}\r\n                  block\r\n                  size=\"lg\"\r\n                >\r\n                  {thread.title}\r\n                </Button>\r\n              );\r\n            })}\r\n          <Button onClick={toggle} block size=\"lg\" color=\"warning\">\r\n            Skapa en tråd\r\n          </Button>\r\n          <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Skapa Tråd</ModalHeader>\r\n            <ModalBody>\r\n              <Form onSubmit={addThread}>\r\n                <FormGroup>\r\n                  <Label>Titel</Label>\r\n                  <Input required type=\"title\" name=\"title\" onChange={(e)=>{setTitle(e.target.value)}} />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label for=\"exampleText\">Skriv ditt inlägg här </Label>\r\n                  <Input required type=\"textarea\" name=\"text\" id=\"exampleText\" onChange={(e)=>{setMessage(e.target.value)}} />\r\n                </FormGroup>\r\n                <Button color=\"primary\">\r\n              Skapa tråd\r\n              </Button>\r\n              </Form>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              \r\n            </ModalFooter>\r\n          </Modal>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default ThreadPage;\r\n","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\pages\\PostsPage.js",["43","44","45"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardText,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  FormText,\r\n} from \"reactstrap\";\r\n\r\nconst PostPage = () => {\r\n  const [posts, setPosts] = useState(null);\r\n  const [answer, setAnswers] = useState(null);\r\n  let { id } = useParams()\r\n\r\n  const getPosts = async () => {\r\n    let res = await fetch(`/api/v1/posts/getPostsByThreadId/` + id);\r\n    console.log(res);\r\n    try {\r\n      res = await res.json();\r\n      setPosts(res);\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.error(\"Faild to fetch post\");\r\n    }\r\n  };\r\n\r\n  const postAnswer = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let postBody = {\r\n      message: answer,\r\n      timestamp: Date.now(),\r\n      thread:  posts[0].thread\r\n    }\r\n\r\n    let response = await fetch(\"/api/v1/posts\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(postBody),\r\n    })\r\n\r\n    console.log(response)\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n    console.log(posts);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(answer);\r\n  }, [answer]);\r\n\r\n  return (\r\n    <div>\r\n      {posts &&\r\n        posts.map((post, i) => {\r\n          return (\r\n            <Card>\r\n              <CardBody>\r\n                <CardText> {post.message} </CardText>\r\n              </CardBody>\r\n            </Card>\r\n          );\r\n        })}\r\n      <Form onSubmit={postAnswer}>\r\n        <FormGroup>\r\n          <Label for=\"exampleText\">Svara här:</Label>\r\n          <Input type=\"textarea\" name=\"text\" id=\"exampleText\" onChange={(e)=> setAnswers(e.target.value)} />\r\n        </FormGroup>\r\n        <Button>Skicka</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default PostPage;\r\n","D:\\skola\\movieForum\\src\\main\\resources\\static\\frontend\\src\\components\\Header.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"46","replacedBy":"50"},{"ruleId":"48","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":34,"column":12,"nodeType":"54","endLine":34,"endColumn":14,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":16,"column":3,"nodeType":"58","messageId":"59","endLine":16,"endColumn":11},{"ruleId":"60","severity":1,"message":"61","line":62,"column":23,"nodeType":"62","messageId":"63","endLine":62,"endColumn":25},{"ruleId":"52","severity":1,"message":"64","line":90,"column":6,"nodeType":"54","endLine":90,"endColumn":8,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":2,"column":21,"nodeType":"58","messageId":"59","endLine":2,"endColumn":31},{"ruleId":"56","severity":1,"message":"57","line":12,"column":3,"nodeType":"58","messageId":"59","endLine":12,"endColumn":11},{"ruleId":"52","severity":1,"message":"67","line":54,"column":6,"nodeType":"54","endLine":54,"endColumn":8,"suggestions":"68"},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],["69"],["70"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'categories'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-unused-vars","'FormText' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getThreads', 'id', and 'threads'. Either include them or remove the dependency array.",["72"],"'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'getPosts' and 'posts'. Either include them or remove the dependency array.",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [categories]",{"range":"80","text":"81"},"Update the dependencies array to be: [getThreads, id, threads]",{"range":"82","text":"83"},"Update the dependencies array to be: [getPosts, posts]",{"range":"84","text":"85"},[887,889],"[categories]",[2080,2082],"[getThreads, id, threads]",[1155,1157],"[getPosts, posts]"]